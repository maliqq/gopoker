// Code generated by protoc-gen-go.
// source: event/message/format/protobuf/message_play.proto
// DO NOT EDIT!

package protobuf

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

// GameType - game type
type GameType int32

const (
	GameType_Texas    GameType = 0
	GameType_Omaha    GameType = 1
	GameType_Omaha8   GameType = 2
	GameType_Stud     GameType = 3
	GameType_Stud8    GameType = 4
	GameType_Razz     GameType = 9
	GameType_London   GameType = 10
	GameType_FiveCard GameType = 11
	GameType_Single27 GameType = 12
	GameType_Triple27 GameType = 13
	GameType_Badugi   GameType = 14
)

var GameType_name = map[int32]string{
	0:  "Texas",
	1:  "Omaha",
	2:  "Omaha8",
	3:  "Stud",
	4:  "Stud8",
	9:  "Razz",
	10: "London",
	11: "FiveCard",
	12: "Single27",
	13: "Triple27",
	14: "Badugi",
}
var GameType_value = map[string]int32{
	"Texas":    0,
	"Omaha":    1,
	"Omaha8":   2,
	"Stud":     3,
	"Stud8":    4,
	"Razz":     9,
	"London":   10,
	"FiveCard": 11,
	"Single27": 12,
	"Triple27": 13,
	"Badugi":   14,
}

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}
func (x GameType) String() string {
	return proto.EnumName(GameType_name, int32(x))
}
func (x GameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *GameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameType_value, data, "GameType")
	if err != nil {
		return err
	}
	*x = GameType(value)
	return nil
}

// GameLimit - game limit
type GameLimit int32

const (
	GameLimit_NoLimit    GameLimit = 0
	GameLimit_PotLimit   GameLimit = 1
	GameLimit_FixedLimit GameLimit = 2
)

var GameLimit_name = map[int32]string{
	0: "NoLimit",
	1: "PotLimit",
	2: "FixedLimit",
}
var GameLimit_value = map[string]int32{
	"NoLimit":    0,
	"PotLimit":   1,
	"FixedLimit": 2,
}

func (x GameLimit) Enum() *GameLimit {
	p := new(GameLimit)
	*p = x
	return p
}
func (x GameLimit) String() string {
	return proto.EnumName(GameLimit_name, int32(x))
}
func (x GameLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *GameLimit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameLimit_value, data, "GameLimit")
	if err != nil {
		return err
	}
	*x = GameLimit(value)
	return nil
}

// SeatState - seat state
type SeatState int32

const (
	SeatState_Empty           SeatState = 0
	SeatState_Reserved        SeatState = 1
	SeatState_Ready           SeatState = 2
	SeatState_WaitingBigBlind SeatState = 3
	SeatState_PostingBigBlind SeatState = 4
	SeatState_Playing         SeatState = 5
	SeatState_Betting         SeatState = 6
	SeatState_Allin           SeatState = 7
	SeatState_Folded          SeatState = 8
	SeatState_Autoplay        SeatState = 9
	SeatState_OutOfStack      SeatState = 10
	SeatState_OutOfTournament SeatState = 11
	SeatState_NotPlaying      SeatState = 12
	SeatState_Disconnected    SeatState = 13
)

var SeatState_name = map[int32]string{
	0:  "Empty",
	1:  "Reserved",
	2:  "Ready",
	3:  "WaitingBigBlind",
	4:  "PostingBigBlind",
	5:  "Playing",
	6:  "Betting",
	7:  "Allin",
	8:  "Folded",
	9:  "Autoplay",
	10: "OutOfStack",
	11: "OutOfTournament",
	12: "NotPlaying",
	13: "Disconnected",
}
var SeatState_value = map[string]int32{
	"Empty":           0,
	"Reserved":        1,
	"Ready":           2,
	"WaitingBigBlind": 3,
	"PostingBigBlind": 4,
	"Playing":         5,
	"Betting":         6,
	"Allin":           7,
	"Folded":          8,
	"Autoplay":        9,
	"OutOfStack":      10,
	"OutOfTournament": 11,
	"NotPlaying":      12,
	"Disconnected":    13,
}

func (x SeatState) Enum() *SeatState {
	p := new(SeatState)
	*p = x
	return p
}
func (x SeatState) String() string {
	return proto.EnumName(SeatState_name, int32(x))
}
func (x SeatState) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *SeatState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SeatState_value, data, "SeatState")
	if err != nil {
		return err
	}
	*x = SeatState(value)
	return nil
}

// Seat - seat info
type Seat struct {
	// required int32 Pos = 1;
	State            *SeatState `protobuf:"varint,2,opt,enum=protobuf.SeatState" json:"State,omitempty"`
	Stack            *float64   `protobuf:"fixed64,3,opt" json:"Stack,omitempty"`
	Bet              *float64   `protobuf:"fixed64,4,opt" json:"Bet,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Seat) Reset()         { *m = Seat{} }
func (m *Seat) String() string { return proto.CompactTextString(m) }
func (*Seat) ProtoMessage()    {}

func (m *Seat) GetState() SeatState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *Seat) GetStack() float64 {
	if m != nil && m.Stack != nil {
		return *m.Stack
	}
	return 0
}

func (m *Seat) GetBet() float64 {
	if m != nil && m.Bet != nil {
		return *m.Bet
	}
	return 0
}

// Table - table info
type Table struct {
	// required string Id = 1;
	Size             *int32  `protobuf:"varint,2,req" json:"Size,omitempty"`
	Button           *int32  `protobuf:"varint,3,req" json:"Button,omitempty"`
	Seats            []*Seat `protobuf:"bytes,4,rep" json:"Seats,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}

func (m *Table) GetSize() int32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *Table) GetButton() int32 {
	if m != nil && m.Button != nil {
		return *m.Button
	}
	return 0
}

func (m *Table) GetSeats() []*Seat {
	if m != nil {
		return m.Seats
	}
	return nil
}

// Game - game info
type Game struct {
	Type             *GameType  `protobuf:"varint,1,req,enum=protobuf.GameType" json:"Type,omitempty"`
	Limit            *GameLimit `protobuf:"varint,2,req,enum=protobuf.GameLimit" json:"Limit,omitempty"`
	TableSize        *int32     `protobuf:"varint,3,req" json:"TableSize,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}

func (m *Game) GetType() GameType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Game) GetLimit() GameLimit {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *Game) GetTableSize() int32 {
	if m != nil && m.TableSize != nil {
		return *m.TableSize
	}
	return 0
}

// Stake - stake info
type Stake struct {
	BigBlind         *float64 `protobuf:"fixed64,1,req" json:"BigBlind,omitempty"`
	SmallBlind       *float64 `protobuf:"fixed64,2,opt" json:"SmallBlind,omitempty"`
	Ante             *float64 `protobuf:"fixed64,3,opt" json:"Ante,omitempty"`
	BringIn          *float64 `protobuf:"fixed64,4,opt" json:"BringIn,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Stake) Reset()         { *m = Stake{} }
func (m *Stake) String() string { return proto.CompactTextString(m) }
func (*Stake) ProtoMessage()    {}

func (m *Stake) GetBigBlind() float64 {
	if m != nil && m.BigBlind != nil {
		return *m.BigBlind
	}
	return 0
}

func (m *Stake) GetSmallBlind() float64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *Stake) GetAnte() float64 {
	if m != nil && m.Ante != nil {
		return *m.Ante
	}
	return 0
}

func (m *Stake) GetBringIn() float64 {
	if m != nil && m.BringIn != nil {
		return *m.BringIn
	}
	return 0
}

// Deal - deal info
type Deal struct {
	Pot              *float64 `protobuf:"fixed64,1,req" json:"Pot,omitempty"`
	Board            []int32  `protobuf:"varint,2,rep" json:"Board,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Deal) Reset()         { *m = Deal{} }
func (m *Deal) String() string { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()    {}

func (m *Deal) GetPot() float64 {
	if m != nil && m.Pot != nil {
		return *m.Pot
	}
	return 0
}

func (m *Deal) GetBoard() []int32 {
	if m != nil {
		return m.Board
	}
	return nil
}

// Play - play info
type Play struct {
	Game             *Game  `protobuf:"bytes,1,req" json:"Game,omitempty"`
	Table            *Table `protobuf:"bytes,2,req" json:"Table,omitempty"`
	Stake            *Stake `protobuf:"bytes,3,req" json:"Stake,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Play) Reset()         { *m = Play{} }
func (m *Play) String() string { return proto.CompactTextString(m) }
func (*Play) ProtoMessage()    {}

func (m *Play) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

func (m *Play) GetTable() *Table {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *Play) GetStake() *Stake {
	if m != nil {
		return m.Stake
	}
	return nil
}

// PlayStart - notify play start
type PlayStart struct {
	Play             *Play  `protobuf:"bytes,1,opt" json:"Play,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayStart) Reset()         { *m = PlayStart{} }
func (m *PlayStart) String() string { return proto.CompactTextString(m) }
func (*PlayStart) ProtoMessage()    {}

func (m *PlayStart) GetPlay() *Play {
	if m != nil {
		return m.Play
	}
	return nil
}

// PlayStop - notify play stop
type PlayStop struct {
	Play             *Play  `protobuf:"bytes,1,opt" json:"Play,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayStop) Reset()         { *m = PlayStop{} }
func (m *PlayStop) String() string { return proto.CompactTextString(m) }
func (*PlayStop) ProtoMessage()    {}

func (m *PlayStop) GetPlay() *Play {
	if m != nil {
		return m.Play
	}
	return nil
}

// StreetStart - notify street start
type StreetStart struct {
	Name             *string `protobuf:"bytes,1,req" json:"Name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StreetStart) Reset()         { *m = StreetStart{} }
func (m *StreetStart) String() string { return proto.CompactTextString(m) }
func (*StreetStart) ProtoMessage()    {}

func (m *StreetStart) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("protobuf.GameType", GameType_name, GameType_value)
	proto.RegisterEnum("protobuf.GameLimit", GameLimit_name, GameLimit_value)
	proto.RegisterEnum("protobuf.SeatState", SeatState_name, SeatState_value)
}
