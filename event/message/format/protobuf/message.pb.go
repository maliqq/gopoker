// Code generated by protoc-gen-go.
// source: event/message/format/protobuf/message.proto
// DO NOT EDIT!

package protobuf

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

// ErrorMessage - notify error
type ErrorMessage struct {
	Message          *string `protobuf:"bytes,1,req" json:"Message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ErrorMessage) Reset()         { *m = ErrorMessage{} }
func (m *ErrorMessage) String() string { return proto.CompactTextString(m) }
func (*ErrorMessage) ProtoMessage()    {}

func (m *ErrorMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// ChatMessage - notify chat message
type ChatMessage struct {
	Pos              *int32  `protobuf:"varint,1,req,name=pos" json:"pos,omitempty"`
	Message          *string `protobuf:"bytes,2,req" json:"Message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}

func (m *ChatMessage) GetPos() int32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

func (m *ChatMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// DealerMessage - notify dealer message
type DealerMessage struct {
	Message          *string `protobuf:"bytes,1,req" json:"Message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DealerMessage) Reset()         { *m = DealerMessage{} }
func (m *DealerMessage) String() string { return proto.CompactTextString(m) }
func (*DealerMessage) ProtoMessage()    {}

func (m *DealerMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// Payload - different message types container
type Payload struct {
	ErrorMessage  *ErrorMessage  `protobuf:"bytes,1,opt" json:"ErrorMessage,omitempty"`
	ChatMessage   *ChatMessage   `protobuf:"bytes,2,opt" json:"ChatMessage,omitempty"`
	DealerMessage *DealerMessage `protobuf:"bytes,3,opt" json:"DealerMessage,omitempty"`
	// gameplay
	PlayStart       *PlayStart       `protobuf:"bytes,4,opt" json:"PlayStart,omitempty"`
	PlayStop        *PlayStop        `protobuf:"bytes,5,opt" json:"PlayStop,omitempty"`
	StreetStart     *StreetStart     `protobuf:"bytes,6,opt" json:"StreetStart,omitempty"`
	BettingComplete *BettingComplete `protobuf:"bytes,7,opt" json:"BettingComplete,omitempty"`
	// table
	JoinTable  *JoinTable  `protobuf:"bytes,8,opt" json:"JoinTable,omitempty"`
	LeaveTable *LeaveTable `protobuf:"bytes,9,opt" json:"LeaveTable,omitempty"`
	SitOut     *SitOut     `protobuf:"bytes,10,opt" json:"SitOut,omitempty"`
	ComeBack   *ComeBack   `protobuf:"bytes,11,opt" json:"ComeBack,omitempty"`
	MoveButton *MoveButton `protobuf:"bytes,12,opt" json:"MoveButton,omitempty"`
	// betting
	RequireBet *RequireBet `protobuf:"bytes,13,opt" json:"RequireBet,omitempty"`
	AddBet     *AddBet     `protobuf:"bytes,14,opt" json:"AddBet,omitempty"`
	// dealing
	DealCards      *DealCards      `protobuf:"bytes,15,opt" json:"DealCards,omitempty"`
	RequireDiscard *RequireDiscard `protobuf:"bytes,16,opt" json:"RequireDiscard,omitempty"`
	Discarded      *Discarded      `protobuf:"bytes,17,opt" json:"Discarded,omitempty"`
	DiscardCards   *DiscardCards   `protobuf:"bytes,18,opt" json:"DiscardCards,omitempty"`
	// showdown
	ShowHand         *ShowHand  `protobuf:"bytes,19,opt" json:"ShowHand,omitempty"`
	ShowCards        *ShowCards `protobuf:"bytes,20,opt" json:"ShowCards,omitempty"`
	Winner           *Winner    `protobuf:"bytes,21,opt" json:"Winner,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}

func (m *Payload) GetErrorMessage() *ErrorMessage {
	if m != nil {
		return m.ErrorMessage
	}
	return nil
}

func (m *Payload) GetChatMessage() *ChatMessage {
	if m != nil {
		return m.ChatMessage
	}
	return nil
}

func (m *Payload) GetDealerMessage() *DealerMessage {
	if m != nil {
		return m.DealerMessage
	}
	return nil
}

func (m *Payload) GetPlayStart() *PlayStart {
	if m != nil {
		return m.PlayStart
	}
	return nil
}

func (m *Payload) GetPlayStop() *PlayStop {
	if m != nil {
		return m.PlayStop
	}
	return nil
}

func (m *Payload) GetStreetStart() *StreetStart {
	if m != nil {
		return m.StreetStart
	}
	return nil
}

func (m *Payload) GetBettingComplete() *BettingComplete {
	if m != nil {
		return m.BettingComplete
	}
	return nil
}

func (m *Payload) GetJoinTable() *JoinTable {
	if m != nil {
		return m.JoinTable
	}
	return nil
}

func (m *Payload) GetLeaveTable() *LeaveTable {
	if m != nil {
		return m.LeaveTable
	}
	return nil
}

func (m *Payload) GetSitOut() *SitOut {
	if m != nil {
		return m.SitOut
	}
	return nil
}

func (m *Payload) GetComeBack() *ComeBack {
	if m != nil {
		return m.ComeBack
	}
	return nil
}

func (m *Payload) GetMoveButton() *MoveButton {
	if m != nil {
		return m.MoveButton
	}
	return nil
}

func (m *Payload) GetRequireBet() *RequireBet {
	if m != nil {
		return m.RequireBet
	}
	return nil
}

func (m *Payload) GetAddBet() *AddBet {
	if m != nil {
		return m.AddBet
	}
	return nil
}

func (m *Payload) GetDealCards() *DealCards {
	if m != nil {
		return m.DealCards
	}
	return nil
}

func (m *Payload) GetRequireDiscard() *RequireDiscard {
	if m != nil {
		return m.RequireDiscard
	}
	return nil
}

func (m *Payload) GetDiscarded() *Discarded {
	if m != nil {
		return m.Discarded
	}
	return nil
}

func (m *Payload) GetDiscardCards() *DiscardCards {
	if m != nil {
		return m.DiscardCards
	}
	return nil
}

func (m *Payload) GetShowHand() *ShowHand {
	if m != nil {
		return m.ShowHand
	}
	return nil
}

func (m *Payload) GetShowCards() *ShowCards {
	if m != nil {
		return m.ShowCards
	}
	return nil
}

func (m *Payload) GetWinner() *Winner {
	if m != nil {
		return m.Winner
	}
	return nil
}

// Message - envelope wrapper
type Message struct {
	Event     *string `protobuf:"bytes,1,req" json:"Event,omitempty"`
	Timestamp *int64  `protobuf:"varint,2,req" json:"Timestamp,omitempty"`
	// optional Notify Notify = 3;
	Payload          *Payload `protobuf:"bytes,4,req" json:"Payload,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetEvent() string {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return ""
}

func (m *Message) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Message) GetPayload() *Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
}
